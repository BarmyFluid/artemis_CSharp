<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnitTests</name>
    </assembly>
    <members>
        <member name="T:UnitTests.Component.TestHealthComponent">
            <summary>The health.</summary>
        </member>
        <member name="F:UnitTests.Component.TestHealthComponent.points">
            <summary>The health points.</summary>
        </member>
        <member name="M:UnitTests.Component.TestHealthComponent.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.Component.TestHealthComponent"/> class.</summary>
        </member>
        <member name="M:UnitTests.Component.TestHealthComponent.#ctor(System.Single)">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.Component.TestHealthComponent"/> class.</summary>
            <param name="points">The health points.</param>
        </member>
        <member name="M:UnitTests.Component.TestHealthComponent.AddDamage(System.Int32)">
            <summary>The add damage.</summary>
            <param name="damage">The damage.</param>
        </member>
        <member name="P:UnitTests.Component.TestHealthComponent.Points">
            <summary>Gets or sets the health points.</summary>
            <value>The health points.</value>
        </member>
        <member name="P:UnitTests.Component.TestHealthComponent.Percentage">
            <summary>Gets the health percentage.</summary>
            <value>The health percentage.</value>
        </member>
        <member name="P:UnitTests.Component.TestHealthComponent.IsAlive">
            <summary>Gets a value indicating whether is alive.</summary>
            <value><see langword="true" /> if this instance is alive; otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:UnitTests.Component.TestHealthComponent.MaximumLimit">
            <summary>Gets the maximum health.</summary>
            <value>The maximum health.</value>
        </member>
        <member name="T:UnitTests.Component.TestPowerComponent">
            <summary>The power 1.</summary>
        </member>
        <member name="P:UnitTests.Component.TestPowerComponent.Power">
            <summary>Gets or sets the power.</summary>
            <value>The power.</value>
        </member>
        <member name="T:UnitTests.Component.TestPowerComponentPoolable">
            <summary>The power 2.</summary>
        </member>
        <member name="M:UnitTests.Component.TestPowerComponentPoolable.CreateInstance(System.Type)">
            <summary>The create instance.</summary>
            <param name="type">The type.</param>
            <returns>The <see cref="T:UnitTests.Component.TestPowerComponentPoolable"/>.</returns>
        </member>
        <member name="P:UnitTests.Component.TestPowerComponentPoolable.Power">
            <summary>Gets or sets the power.</summary>
            <value>The power.</value>
        </member>
        <member name="T:UnitTests.Extra.DummyPlaceHolder">
            <summary>
            Class to hold a Component
            </summary>
        </member>
        <member name="P:UnitTests.Extra.DummyPlaceHolder.Component">
            <summary>
            Gets or sets the component.
            </summary>
            <value>
            The component.
            </value>
        </member>
        <member name="T:UnitTests.System.TestProcessingSystem">
            <summary>
            The dummy system .
            </summary>
        </member>
        <member name="M:UnitTests.System.TestProcessingSystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestProcessingSystem"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestProcessingSystem.ProcessSystem">
            <summary>
            Processes the System
            Users should extend this method
            </summary>
        </member>
        <member name="P:UnitTests.System.TestProcessingSystem.Counter">
            <summary>
            Gets or sets the counter.
            </summary>
            <value>
            The counter.
            </value>
        </member>
        <member name="T:UnitTests.System.TestQueueSystemCopy2">
            <summary>The queue system test 3.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueSystemCopy2.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestQueueSystemCopy"/> class.</summary>
            <param name="damage">The damage.</param>
        </member>
        <member name="M:UnitTests.System.TestQueueSystemCopy2.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueSystemCopy2.Process(UnitTests.Extra.DummyPlaceHolder)">
            <summary>The process.</summary>        
        </member>
        <member name="T:UnitTests.System.TestNormalEntityProcessingSystem2">
            <summary>The second most simple system ever.</summary>
        </member>
        <member name="F:UnitTests.System.TestNormalEntityProcessingSystem2.testHealthMapper">
            <summary>The test health mapper.</summary>
        </member>
        <member name="F:UnitTests.System.TestNormalEntityProcessingSystem2.testPowerMapper">
            <summary>The test power mapper.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestNormalEntityProcessingSystem2"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem2.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem2.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestNormalEntityProcessingSystem3">
            <summary>The third most simple system ever.</summary>
        </member>
        <member name="F:UnitTests.System.TestNormalEntityProcessingSystem3.testHealthMapper">
            <summary>The test health mapper.</summary>
        </member>
        <member name="F:UnitTests.System.TestNormalEntityProcessingSystem3.testPowerMapper">
            <summary>The test power mapper.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem3.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestNormalEntityProcessingSystem3"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem3.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem3.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestQueueSystemCopy">
            <summary>The queue system test 2.</summary>
        </member>
        <member name="F:UnitTests.System.TestQueueSystemCopy.testHealthMapper">
            <summary>The test health mapper.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueSystemCopy.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestQueueSystemCopy"/> class.</summary>
            <param name="damage">The damage.</param>
        </member>
        <member name="M:UnitTests.System.TestQueueSystemCopy.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueSystemCopy.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:UnitTests.System.TestQueueSystemCopy.Damage">
            <summary>Gets the damage.</summary>
            <value>The damage.</value>
        </member>
        <member name="T:UnitTests.TestEntityFactory">
            <summary>The class TestEntityFactory.</summary>
        </member>
        <member name="M:UnitTests.TestEntityFactory.CreateTestHealthEntity(Artemis.EntityWorld,System.String,System.String)">
            <summary>Creates the test health entity.</summary>
            <param name="entityWorld">The entity world.</param>
            <param name="group">The group.</param>
            <param name="tag">The tag.</param>
            <returns>The specified entity.</returns>
        </member>
        <member name="M:UnitTests.TestEntityFactory.CreateTestPowerEntity(Artemis.EntityWorld)">
            <summary>Creates the test power1 entity.</summary>
            <param name="entityWorld">The entity world.</param>
            <returns>The specified entity.</returns>
        </member>
        <member name="M:UnitTests.TestEntityFactory.CreateTestPowerEntityWithPooledComponent(Artemis.EntityWorld)">
            <summary>Creates the test power2 entity with pooled component.</summary>
            <param name="entityWorld">The entity world.</param>
            <returns>The specified entity.</returns>
        </member>
        <member name="M:UnitTests.TestEntityFactory.CreateTestPower2Entity(Artemis.EntityWorld)">
            <summary>Creates the test power2 entity.</summary>
            <param name="entityWorld">The entity world.</param>
            <returns>The specified entity.</returns>
        </member>
        <member name="T:UnitTests.TestGeneral">
            <summary>The general test.</summary>
        </member>
        <member name="F:UnitTests.TestGeneral.Load">
            <summary>The load.</summary>
        </member>
        <member name="F:UnitTests.TestGeneral.ComponentPool">
            <summary>The component pool.</summary>
        </member>
        <member name="F:UnitTests.TestGeneral.HealthBag">
            <summary>The health bag.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestAttributes">
            <summary>Tests the attributes.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestDummies">
            <summary>Tests the dummies.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestUniqId">
            <summary>Tests uniq id.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestHybridQueueSystem">
            <summary>Tests the hybrid queue system.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestSimpleSystem">
            <summary>Tests a simple system.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestSimpleSystem2">
            <summary>
            Tests the simple system2.
            </summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestQueueSystems">
            <summary>Tests the queue systems.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.FTestQueueSystems">
            <summary>Tests the queue systems.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestSystemCommunication">
            <summary>Systems the communication test.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestRenderMultiHealthBarSystem">
            <summary>Tests the render multi health bar system.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestMultipleSystems">
            <summary>Tests multiple systems.</summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestEntityComponentSystem">
            <summary> Test EntiyComponentSystem{...}. </summary>
        </member>
        <member name="M:UnitTests.TestGeneral.TestDerivedComponents">
            <summary> Test IComponent{T} </summary>
        </member>
        <member name="M:UnitTests.TestGeneral.RemovedComponent(Artemis.Entity,Artemis.Interface.IComponent)">
            <summary>The removed component.</summary>
            <param name="entity">The entity.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:UnitTests.TestGeneral.RemovedEntity(Artemis.Entity)">
            <summary>The removed entity.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.Program">
            <summary>The class Program.</summary>
        </member>
        <member name="M:UnitTests.Program.Main">
            <summary>Defines the entry point of the application.</summary>
        </member>
        <member name="T:UnitTests.System.TestCommunicationSystem">
            <summary>The class test communication system.</summary>
        </member>
        <member name="F:UnitTests.System.TestCommunicationSystem.damage">
            <summary>The damage.</summary>
        </member>
        <member name="F:UnitTests.System.TestCommunicationSystem.healthMapper">
            <summary>The health mapper.</summary>
        </member>
        <member name="M:UnitTests.System.TestCommunicationSystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestCommunicationSystem"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestCommunicationSystem.LoadContent">
            <summary>The initialize.</summary>
        </member>
        <member name="M:UnitTests.System.TestCommunicationSystem.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestEntityProcessingSystem1">
            <summary>The dummy system 1.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestEntityProcessingSystem1"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem1.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestEntityProcessingSystem2">
            <summary>The dummy system 2.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestEntityProcessingSystem2"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem2.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestEntityProcessingSystem3">
            <summary>The dummy system 3.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem3.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestEntityProcessingSystem3"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestEntityProcessingSystem3.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestQueueHybridSystem">
            <summary>The hybrid queue system test.</summary>
        </member>
        <member name="F:UnitTests.System.TestQueueHybridSystem.healthMapper">
            <summary>The health mapper.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueHybridSystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestQueueHybridSystem"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueHybridSystem.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueHybridSystem.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestQueueSystem">
            <summary>The queue system test 2.</summary>
        </member>
        <member name="F:UnitTests.System.TestQueueSystem.testHealthMapper">
            <summary>The test health mapper.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueSystem.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestQueueSystem"/> class.</summary>
            <param name="damage">The damage.</param>
        </member>
        <member name="M:UnitTests.System.TestQueueSystem.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:UnitTests.System.TestQueueSystem.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:UnitTests.System.TestQueueSystem.Damage">
            <summary>Gets the damage.</summary>
            <value>The damage.</value>
        </member>
        <member name="T:UnitTests.System.TestRenderHealthBarSingleSystem">
            <summary>The single health bar render system.</summary>
        </member>
        <member name="F:UnitTests.System.TestRenderHealthBarSingleSystem.healthMapper">
            <summary>The health mapper.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleSystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestRenderHealthBarSingleSystem"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleSystem.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleSystem.UnloadContent">
            <summary>Override to implement code that gets executed when systems are terminated.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleSystem.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestNormalEntityProcessingSystem1">
            <summary>The most simple system ever.</summary>
        </member>
        <member name="F:UnitTests.System.TestNormalEntityProcessingSystem1.testHealthMapper">
            <summary>The test health mapper.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestNormalEntityProcessingSystem1"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem1.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:UnitTests.System.TestNormalEntityProcessingSystem1.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestRenderHealthBarMultiSystem">
            <summary>The multi health bar render system.</summary>
        </member>
        <member name="F:UnitTests.System.TestRenderHealthBarMultiSystem.healthMapper">
            <summary>The health mapper.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarMultiSystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestRenderHealthBarMultiSystem"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarMultiSystem.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarMultiSystem.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.System.TestRenderHealthBarSingleHeavySystem">
            <summary>The single heavy health bar render system.</summary>
        </member>
        <member name="F:UnitTests.System.TestRenderHealthBarSingleHeavySystem.healthMapper">
            <summary>The health mapper.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleHeavySystem.#ctor">
            <summary>Initializes a new instance of the <see cref="T:UnitTests.System.TestRenderHealthBarSingleHeavySystem"/> class.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleHeavySystem.LoadContent">
            <summary>Override to implement code that gets executed when systems are initialized.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleHeavySystem.UnloadContent">
            <summary>Override to implement code that gets executed when systems are terminated.</summary>
        </member>
        <member name="M:UnitTests.System.TestRenderHealthBarSingleHeavySystem.Process(Artemis.Entity)">
            <summary>The process.</summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:UnitTests.Template.TestEntityTemplate">
            <summary>Class TestEntityTemplate.</summary>
        </member>
        <member name="M:UnitTests.Template.TestEntityTemplate.BuildEntity(Artemis.Entity,Artemis.EntityWorld,System.Object[])">
            <summary>The build entity.</summary>
            <param name="entity">The entity.</param>
            <param name="entityWorld">The entity world.</param>
            <param name="args">The args.</param>
            <returns>The built <see cref="T:Artemis.Entity"/>.</returns>
        </member>
        <member name="T:UnitTests.TestBag">
            <summary>This is a test class for TestBag and is intended to contain all TestBag Unit Tests.</summary>
        </member>
        <member name="F:UnitTests.TestBag.Capacity">
            <summary>The test Capacity.</summary>
        </member>
        <member name="F:UnitTests.TestBag.TestElement1">
            <summary>The test element1.</summary>
        </member>
        <member name="F:UnitTests.TestBag.TestElement2">
            <summary>The test element2.</summary>
        </member>
        <member name="F:UnitTests.TestBag.TestElement3">
            <summary>The test element3.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestBagConstructor">
            <summary>Tests the bag constructor.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestAdd">
            <summary>Tests the add.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestAddRange">
            <summary>Tests the add range.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestClear">
            <summary>Tests the clear.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestContains">
            <summary>Tests the contains.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestGet">
            <summary>Tests the get.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestGrow">
            <summary>Tests the grow.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestRemove">
            <summary>Tests the remove.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestRemoveAll">
            <summary>Tests the remove all.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestRemoveLast">
            <summary>Tests the remove last.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestSet">
            <summary>Tests the set.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestCapacity">
            <summary>Tests the capacity.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestIsEmpty">
            <summary>Tests the is empty.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestItem">
            <summary>Tests the item.</summary>
        </member>
        <member name="M:UnitTests.TestBag.TestPerformance">
            <summary>Tests the performance.</summary>
        </member>
        <member name="P:UnitTests.TestBag.TestContext">
            <summary>Gets or sets the test context which provides information about and functionality for the current test run.</summary>
            <value>The test context.</value>
        </member>
        <member name="T:UnitTests.TestTimeWaster">
            <summary>This is a class.</summary>
        </member>
        <member name="M:UnitTests.TestTimeWaster.#cctor">
            <summary>Initializes static members of the <see cref="T:UnitTests.TestTimeWaster"/> class.</summary>
        </member>
        <member name="M:UnitTests.TestTimeWaster.Delay(System.Int32)">
            <summary>Delays the specified iterations.</summary>
            <param name="iterations">The iterations.</param>
        </member>
        <member name="P:UnitTests.TestTimeWaster.Result">
            <summary>Gets the result.</summary>
            <value>The result.</value>
        </member>
    </members>
</doc>
